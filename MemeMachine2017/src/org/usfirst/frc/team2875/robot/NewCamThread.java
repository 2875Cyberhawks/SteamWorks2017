package org.usfirst.frc.team2875.robot;

import java.util.ArrayList;
import org.opencv.core.*;
import org.opencv.imgproc.*;

import edu.wpi.cscore.CvSource;
import edu.wpi.cscore.UsbCamera;
import edu.wpi.cscore.VideoMode.PixelFormat;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
/**
* VisionCode class.
*
* <p>An OpenCV pipeline generated by GRIP.
*
* @author GRIP
*/
public class NewCamThread {

	//Outputs
	private Mat blurOutput = new Mat();
	private Mat hslThresholdOutput = new Mat();
	private Mat cvCannyOutput = new Mat();
	
	UsbCamera camera;
	CvSource outputStream;
	UsbCamera camera2;
	public boolean running = true;
	
	static final int WIDTH = 360;
	static final int HEIGHT = 480;
	static final double[] white = new double[] {1,1,1};
	static {
		System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
	}

	public NewCamThread() {
		SmartDashboard.putNumber("Peg Cam Threshold", 145);
    	SmartDashboard.putNumber("Peg Cam Threshold Upper", 240);
    	camera = CameraServer.getInstance().startAutomaticCapture();
    	camera.setResolution(320, 240);
	    camera.setExposureManual(1);
		camera.setBrightness(1);
	    camera.setFPS(10);
	    camera.setPixelFormat(PixelFormat.kMJPEG);
		outputStream = CameraServer.getInstance().putVideo("Processed", 320, 240);
		camera2 = CameraServer.getInstance().startAutomaticCapture(1);
    	camera2.setFPS(10);
    	camera2.setResolution(400, 300);
    	camera2.setPixelFormat(PixelFormat.kMJPEG);
		System.out.println("Camera Init");
		run();
	}
	
	private void run() {
		Thread thread =  new Thread(()->{
			while(!Thread.interrupted()){
				if(!running){
					outputStream.free();
					//CameraServer.getInstance().removeCamera("USB Camera 0");
					
					break;
				}
				Mat input = null;
				CameraServer.getInstance().getVideo().grabFrame(input);
				process(input);
			}
	    });
		thread.start();
	}
	
	
	public void stop() {
		running = false;
	}
	
	/**
	 * This is the primary method that runs the entire pipeline and updates the outputs.
	 */
	public void process(Mat source0) {
		if(source0 == null) {
			System.out.println("INPUT MAT IS NULL");
			return;
		}
		// Step Blur0:
		Mat blurInput = source0;
		BlurType blurType = BlurType.get("Box Blur");
		double blurRadius = 8.108108108108103;
		blur(blurInput, blurType, blurRadius, blurOutput);

		// Step HSL_Threshold0:
		Mat hslThresholdInput = blurOutput;
		double[] hslThresholdHue = {45.32374100719424, 180.0};
		double[] hslThresholdSaturation = {96.31294964028775, 255.0};
		double[] hslThresholdLuminance = {126.12410071942446, 227.09595959595958};
		hslThreshold(hslThresholdInput, hslThresholdHue, hslThresholdSaturation, hslThresholdLuminance, hslThresholdOutput);

		// Step CV_Canny0:
		Mat cvCannyImage = hslThresholdOutput;
		double cvCannyThreshold1 = 0.0;
		double cvCannyThreshold2 = 0.0;
		double cvCannyAperturesize = 3;
		boolean cvCannyL2gradient = false;
		cvCanny(cvCannyImage, cvCannyThreshold1, cvCannyThreshold2, cvCannyAperturesize, cvCannyL2gradient, cvCannyOutput);
	        
		ArrayList<Integer> indexes = new ArrayList<Integer>();
		for(int j = 0;j < WIDTH;j++) {
			if(cvCannyImage.get(HEIGHT / 2, j) == white) {
				System.out.println(cvCannyImage.get(HEIGHT / 2, j));
				indexes.add(j);
			}
		}
		
		int avg = 0;
		for(int i = 0; i < indexes.size();i++) {
			avg += indexes.get(i);
		}
		avg /= indexes.size();
		System.out.println(avg);
	}
	        
	/**
	 * This method is a generated getter for the output of a Blur.
	 * @return Mat output from Blur.
	 */
	public Mat blurOutput() {
		return blurOutput;
	}

	/**
	 * This method is a generated getter for the output of a HSL_Threshold.
	 * @return Mat output from HSL_Threshold.
	 */
	public Mat hslThresholdOutput() {
		return hslThresholdOutput;
	}

	/**
	 * This method is a generated getter for the output of a CV_Canny.
	 * @return Mat output from CV_Canny.
	 */
	public Mat cvCannyOutput() {
		return cvCannyOutput;
	}


	/**
	 * An indication of which type of filter to use for a blur.
	 * Choices are BOX, GAUSSIAN, MEDIAN, and BILATERAL
	 */
	enum BlurType{
		BOX("Box Blur"), GAUSSIAN("Gaussian Blur"), MEDIAN("Median Filter"),
		BILATERAL("Bilateral Filter");
		private final String label;
		BlurType(String label) {
			this.label = label;
		}

		public static BlurType get(String type) {
			if (BILATERAL.label.equals(type)) {
				return BILATERAL;
			}
			else if (GAUSSIAN.label.equals(type)) {
				return GAUSSIAN;
			}
			else if (MEDIAN.label.equals(type)) {
				return MEDIAN;
			}
			else {
				return BOX;
			}
		}

		@Override
		public String toString() {
			return this.label;
		}
	}

	/**
	 * Softens an image using one of several filters.
	 * @param input The image on which to perform the blur.
	 * @param type The blurType to perform.
	 * @param doubleRadius The radius for the blur.
	 * @param output The image in which to store the output.
	 */
	private void blur(Mat input, BlurType type, double doubleRadius,
		Mat output) {
		int radius = (int)(doubleRadius + 0.5);
		int kernelSize;
		switch(type){
			case BOX:
				kernelSize = 2 * radius + 1;
				Imgproc.blur(input, output, new Size(kernelSize, kernelSize));
				break;
			case GAUSSIAN:
				kernelSize = 6 * radius + 1;
				Imgproc.GaussianBlur(input,output, new Size(kernelSize, kernelSize), radius);
				break;
			case MEDIAN:
				kernelSize = 2 * radius + 1;
				Imgproc.medianBlur(input, output, kernelSize);
				break;
			case BILATERAL:
				Imgproc.bilateralFilter(input, output, -1, radius, radius);
				break;
		}
	}

	/**
	 * Segment an image based on hue, saturation, and luminance ranges.
	 *
	 * @param input The image on which to perform the HSL threshold.
	 * @param hue The min and max hue
	 * @param sat The min and max saturation
	 * @param lum The min and max luminance
	 * @param output The image in which to store the output.
	 */
	private void hslThreshold(Mat input, double[] hue, double[] sat, double[] lum,
		Mat out) {
		Imgproc.cvtColor(input, out, Imgproc.COLOR_BGR2HLS);
		Core.inRange(out, new Scalar(hue[0], lum[0], sat[0]),
			new Scalar(hue[1], lum[1], sat[1]), out);
	}

	/**
	 * Applies a canny edge detection to the image.
	 * @param image image to use.
	 * @param thres1 first threshold for the canny algorithm.
	 * @param thres2 second threshold for the canny algorithm.
	 * @param apertureSize aperture size for the canny operation.
	 * @param gradient if the L2 norm should be used.
	 * @param edges output of the canny.
	 */
	private void cvCanny(Mat image, double thres1, double thres2,
		double apertureSize, boolean gradient, Mat edges) {
		Imgproc.Canny(image, edges, thres1, thres2, (int)apertureSize, gradient);
	}



}

